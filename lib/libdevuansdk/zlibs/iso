#!/usr/bin/env zsh
# Copyright (c) 2016-2017 Dyne.org Foundation
# libdevuansdk is maintained by Ivan J. <parazyd@dyne.org>
#
# This file is part of libdevuansdk
#
# This source code is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this source code. If not, see <http://www.gnu.org/licenses/>.

## burn baby

#[[ $INSTALLER = 1 ]] && base_packages+=(grub-pc)

iso_prepare_strap() {
	fn iso_prepare_strap
	req=(strapdir)
	ckreq || return 1

	notice "preparing strapdir for livecd"

	cat <<EOF | sudo tee ${strapdir}/isoprep >/dev/null
#!/bin/sh
apt-get update
apt-get --yes --force-yes install dialog live-boot live-boot-initramfs-tools
apt-get --yes --force-yes autoremove
EOF

	chroot-script -d isoprep    || zerr
}

iso_setup_isolinux() {
	fn iso_setup_isolinux
	req=(workdir strapdir release arch url_pkg)
	ckreq || return 1

	notice "setting up isolinux"

	mkdir -p $workdir/binary/{live,isolinux}
	act "copying kernel and initrd"
	cp $strapdir/boot/vmlinuz* $workdir/binary/live/vmlinuz
	cp $strapdir/boot/initrd*  $workdir/binary/live/initrd.img
	#cp $strapdir/boot/memtest86+.bin $workdir/binary/live/memtest	
	
	rm -rf $workdir/syslinux
	mkdir -p $workdir/syslinux
	pushd $workdir/syslinux
	wget $url_pkg/dists/$release/main/binary-$arch/Packages.gz
	rm -f Packages
	gzip -d Packages.gz
	
	line=`grep "^Filename:" Packages | grep "syslinux_"`
	
	line=${line##*/}
	line=${line%%-*}
	
	wget $url_pkg/dists/$release/main/source/Sources.gz
	rm -f Sources
	gzip -d Sources.gz
	
	if grep "syslinux_" Sources | grep ".orig.tar.gz"
	then
	    line=`grep "syslinux_" Sources | grep ".orig.tar.g z"`
	elif  grep "syslinux_" Sources | grep ".orig.tar.xz"
	then
	    line=`grep "syslinux_" Sources | grep ".orig.tar.xz"`
	fi
		
	wget http://deb.debian.org/debian/pool/main/s/syslinux/syslinux_${line##*_}	
	if [ ${line##*.} = "xz" ]; then
		tar -Jxvf "syslinux_${line##*_}"
	elif [ ${line##*.} = "gz" ]; then
		tar -xzvf "syslinux_${line##*_}"
	fi

	notice "building syslinux"
	pushd syslinux-*
	make
	popd && popd
	
	case $arch in
		i386)   bits="32"      ;;
		amd64)  bits="64"      ;;
	esac
	
	case $bits in
		"32")  efiboot="bootia32.efi"     ;;
		"64")  efiboot="bootix32.efi"     ;;
	esac
		
	cp -rav $workdir/syslinux/syslinux-*/bios/core/isolinux.bin                  $workdir/binary/isolinux/
	cp -rav $workdir/syslinux/syslinux-*/bios/com32/chain/chain.c32              $workdir/binary/isolinux/
	cp -rav $workdir/syslinux/syslinux-*/bios/com32/elflink/ldlinux/ldlinux.c32  $workdir/binary/isolinux/
	cp -rav $workdir/syslinux/syslinux-*/bios/com32/lib/libcom32.c32             $workdir/binary/isolinux/	
	cp -rav $workdir/syslinux/syslinux-*/bios/com32/libutil/libutil.c32          $workdir/binary/isolinux/
	cp -rav $workdir/syslinux/syslinux-*/bios/com32/menu/vesamenu.c32            $workdir/binary/isolinux/
}

iso_write_isolinux_cfg() {
	fn iso_write_isolinux_cfg "(override)"
	req=(workdir)
	ckreq || return 1
	
	## overridden in blends
	
	#distrib=`echo "${blend_distribution}" | sed 's/^./\u&/'`		
	#sed -i "s/${distrib} Live/${blend_distribution} ${version%%.*} ${label} ${kernel_flavor}/g" $workdir/binary/isolinux/menu.cfg
}

iso_squash_strap() {
	fn iso_squash_strap
	req=(workdir strapdir)
	ckreq || return 1

	notice "creating squashfs out of strapdir"

	case "$arch" in
		amd64|i386)
			_compfilt="-Xbcj x86"
			;;
		arm*)
			_compfilt="-Xbcj arm"
			;;
		*)
			_compfilt=""
			;;
	esac
	pushd $workdir
	[[ -f binary/live/filesystem.squashfs ]] && rm -f binary/live/filesystem.squashfs
	sudo mksquashfs $strapdir binary/live/filesystem.squashfs \
		-no-recovery -always-use-fragments -b 1048576 -comp xz ${=_compfilt} -Xdict-size 75% || zerr

	#~ sudo mksquashfs $strapdir binary/live/filesystem.squashfs \
		#~ -comp xz ${=_compfilt} -noappend || zerr
		

	popd
}

iso_xorriso_build() {
	fn iso_xorriso_build
	req=(workdir image_name)
	ckreq || return 1

	notice "building iso..."

	#date_stamp=$(date "+%Y.%m.%d")
	date_stamp=$(date "+%Y.%m")
	#blend_distribution=${blend%%-*}
	blend=${blendlib##*/}
	blend_distribution=${blend%%-*}
	#label=`echo "${blend_distribution}" | sed 's/^./\u&/'`
	#release_label=`echo "${release}" | sed 's/^./\u&/'`
	label=${blend##*-}
	label=${label%%.*}
	release_label=$release
	image_name="${blend_distribution}-${version}-${release_label}_${date_stamp}-${label}_${earch}"
	echo "image_name: "${image_name}

	[[ -n "$mkefi" ]] && {
	uefi_opt="-eltorito-alt-boot -e boot/grub/efiboot.img -isohybrid-gpt-basdat -no-emul-boot"
	}

	## this is a hack
	isohybrid=/usr/lib/ISOLINUX/isohdpfx.bin #"$R"/extra/syslinux/isohdpfx.bin

	mkdir -p $R/dist
	pushd $workdir
	
	sudo xorriso -as mkisofs -r -J -joliet-long -l \
		-isohybrid-mbr $isohybrid \
		-partition_offset 16 \
		-A "${os} Live - ${arch}" \
		-b isolinux/isolinux.bin \
		-c isolinux/boot.cat \
		-no-emul-boot \
		-boot-load-size 4 \
		-boot-info-table \
		${=uefi_opt} \
		-o customiso.iso \
		binary || zerr

		mv ./customiso.iso $R/dist/$image_name.iso 
	
	popd
	unset uefi_opt

	[[ "$DEBUG" = 1 ]] || {
		[[ -n "$workdir" ]] && sudo rm -rf "$workdir"
	}
}

iso_genisoimage_build() {
	fn iso_xorriso_build
	req=(workdir earch blendlib version release)
	ckreq || return 1

	notice "building iso..."
	
	#date_stamp=$(date "+%Y.%m.%d")
	date_stamp=$(date "+%Y.%m")
	#blend_distribution=${blend%%-*}
	blend=${blendlib##*/}
	blend_distribution=${blend%%-*}
	#label=`echo "${blend_distribution}" | sed 's/^./\u&/'`
	#release_label=`echo "${release}" | sed 's/^./\u&/'`
	label=${blend##*-}
	label=${label%%.*}
	release_label=$release
	image_name="${blend_distribution}-${version}-${release_label}_${date_stamp}-${label}_${earch}"
	
	isohybrid="$R"/extra/syslinux/isohdpfx.bin

	mkdir -p $R/dist
	pushd $workdir
	
	[[ -f $workdir/binary/md5sums ]] && rm -f $workdir/binary/md5sums
	
	chmod -R 777 $workdir/binary
	pushd $workdir/binary	
	find . -xdev -type f -print0 | xargs -0 md5sum > md5sums
	popd
	genisoimage    \
		-quiet \
		-r    \
		-V customiso    \
		-cache-inodes    \
		-J    \
		-l    \
		-b isolinux/isolinux.bin    \
		-c isolinux/boot.cat    \
		-no-emul-boot    \
		-boot-load-size 4    \
		-boot-info-table    \
		-o $R/dist/customiso.iso "$workdir/binary" || zerr

	mv $R/dist/customiso.iso $R/dist/$image_name.iso 
	isohybrid $R/dist/$image_name.iso
	md5sum $R/dist/$image_name.iso > $R/dist/$image_name.iso.md5

	[[ "$DEBUG" = 1 ]] || {
		[[ -n "$workdir" ]] && rm -rf "$workdir"
	}
}

iso_make_efi() {
	fn iso_make_efi
	req=(workdir url_pkg arch blend blendname)
	ckreq || return 1
	
	notice "creating efi boot files"
	
	binary=$workdir/"binary"
	efi_dir=$workdir/"efi_dir"		
	
	if [ -d $efi_dir ] ; then
		if [ -d $efi_dir/img-mnt ] ; then
			umount -l $efi_dir/img-mnt
		fi
		rm -rf $efi_dir
	fi
	
	# start with empty directories.
	
	if [ -d $binary/boot ] ; then
		rm -rf $binary/boot
	fi

	if [ -d $binary/efi ] ; then
		rm -rf $binary/efi
	fi
	
	case $arch in	
		amd64)  arch_efi="x86_64-efi"
				boot_efi="bootx64.efi"
				efi_pkg="grub-efi-amd64-bin"
				;;
		i386)   arch_efi="i386-efi"
				boot_efi="bootia32.efi"
				efi_pkg="grub-efi-ia32-bin"
				;;
		*) error "invalid grub_arch specified"; zerr;;
	esac	
	
	mkdir -p $binary/efi/boot
	# mkdir -p $binary/boot/grub/theme
	mkdir -p $binary/boot/grub/$arch_efi
	
	mkdir -p $efi_dir/efi/boot
	mkdir -p $efi_dir/boot/grub/$arch_efi	

# ozi - moved to blend_post_efi()	
	# copy splash, theme and grub.cfg
	#~ cp $R/extra/isolinux-overlay/splash.png $binary/boot/grub/	
	#~ cp $R/extra/grub-overlay/1              $binary/boot/grub/theme
	#~ cp $R/extra/grub-overlay/grub.cfg       $binary/boot/grub/

	tempdir=$efi_dir/"tmp"
	mkdir -p $tempdir/boot/grub

	cat >$tempdir/boot/grub/grub.cfg <<EOF
search --file --set=root /isolinux/isolinux.cfg
set prefix=(\$root)/boot/grub
source \$prefix/${arch_efi}/grub.cfg
EOF

	pushd $tempdir
	
		# make a tarred "memdisk" to embed in the grub image
		tar -cvf memdisk boot
		
		# make the grub image - Required grub-efi-amd64-bin or grub-efi-ia32-bin !!
		grub-mkimage -O $arch_efi -m "memdisk" -o $boot_efi -p '(memdisk)/boot/grub' \
			search iso9660 configfile normal memdisk tar cat part_msdos part_gpt fat ext2 ntfs ntfscomp hfsplus chain boot linux
		
	popd
	
	cp $tempdir/$boot_efi $efi_dir/efi/boot
	cp $tempdir/$boot_efi $binary/efi/boot	
	rm -rf $tempdir
	
	## Do the boot image "boot/grub/efiboot.img"	
	dd if=/dev/zero of=$efi_dir/boot/grub/efiboot.img bs=1K count=1440
	/sbin/mkdosfs -F 12 $efi_dir/boot/grub/efiboot.img
	mkdir $efi_dir/img-mnt
	mount -o loop $efi_dir/boot/grub/efiboot.img $efi_dir/img-mnt
	mkdir -p $efi_dir/img-mnt/efi/boot
	cp $efi_dir/efi/boot/$boot_efi $efi_dir/img-mnt/efi/boot/
	umount -l $efi_dir/img-mnt
	rmdir $efi_dir/img-mnt
	
	cp $efi_dir/boot/grub/efiboot.img $binary/boot/grub/
	
	pushd $efi_dir
	wget $url_pkg/dists/$release/main/binary-$arch/Packages.gz
	gzip -d Packages.gz
	pkg=`grep "^Filename: pool/" Packages | grep "/${efi_pkg}_" | grep "_${arch}.deb"`
	wget $url_pkg/${pkg#*" "}
	pkg=${pkg##*/}
	dpkg -x $pkg $efi_pkg
	pkg=`grep "^Filename: pool/" Packages | grep "/grub-common_" | grep "_${arch}.deb"`
	wget $url_pkg/${pkg#*" "}
	pkg=${pkg##*/}
	dpkg -x $pkg grub-common	
	rm -f Packages
	
	# copy modules and font
	cp $efi_dir/$efi_pkg/usr/lib/grub/$arch_efi/*.mod $binary/boot/grub/$arch_efi/
	cp $efi_dir/$efi_pkg/usr/lib/grub/$arch_efi/*.lst $binary/boot/grub/$arch_efi/
	
	# Delete some modules
	#~ list=$R/extra/banmods
	#~ for line in $(cat $list); do
		#~ rm -f $binary/boot/grub/$arch_efi/${line}.mod
	#~ done

	while read line; do
		rm -f ${workdir}/binary/boot/grub/${arch_efi}/${line}.mod
	done < $R/extra/banmods		
	
	# if this doesn't work try another font from the same place (grub's default, unicode.pf2, is much larger)
	# Either of these will work, and they look the same to me. Unicode seems to work with qemu. -fsr
#	cp grub-common/usr/share/grub/ascii.pf2 boot/grub/font.pf2
	cp $efi_dir/grub-common/usr/share/grub/ascii.pf2 $binary/boot/grub/font.pf2
# ozi - too big
#	cp $efi_dir/grub-common/usr/share/grub/unicode.pf2 $binary/boot/grub/font.pf2
	
	# second grub.cfg file
	for i in $(ls $efi_dir/$efi_pkg/usr/lib/grub/$arch_efi|grep part_|grep \.mod|sed 's/.mod//'); do
		echo "insmod $i" >> $binary/boot/grub/$arch_efi/grub.cfg;
	done	
	
	# Additional modules so we don't boot in blind mode. I don't know which ones are really needed.
	#for i in efi_gop efi_uga ieee1275_fb vbe vga video_bochs video_cirrus jpeg png gfxterm ; do
	#	echo "insmod $i" >> $workdir/binary/boot/grub/$arch_efi/grub.cfg ;
	#done
	
	echo "source /boot/grub/grub.cfg" >> $workdir/binary/boot/grub/$arch_efi/grub.cfg
	
	rm -rf $efi_dir
	
	popd
	unset tempdir efi_dir arch_efi boot_efi
	
}
