#!/usr/bin/env zsh
# star-i3.blend

arrs+=(purge_packages_final)

BLENDPATH="${BLENDPATH:-$(dirname $0)}"

source $BLENDPATH/config

blend_preinst() {
	fn blend_preinst
	req=(strapdir blend release)
	ckreq || return 1

	notice "executing $blend preinst"
	
}


blend_postinst() {
	fn blend_postinst
	req=(strapdir)
	ckreq || return 1

	notice "executing $blendname postinst $BLENDPATH"
	
	pushd "$strapdir"
		sudo rsync -avx --no-o --no-g $R/extra/common/rootfs-overlay/* . || zerr
		sudo rsync -avx --no-o --no-g "$BLENDPATH"/rootfs-overlay/* . || zerr
	popd
	
## finalize
	blend_finalize          || zerr

}


blend_finalize() {
	fn blend_finalize
	req=(strapdir)
	ckreq || return 1

notice "Running blend_finalize"

# remove fstab for iso. Probably, this should be in iso_prepare_strap
	rm -f $strapdir/etc/fstab

	echo \
"127.0.0.1       ${os}                localhost
::1              localhost            ip6-localhost ip6-loopback
fe00::0          ip6-localnet
fe00::0          ip6-mcastprefix
fe02::1          ip6-allnodes
fe02::1          ip6-allrouters" > $strapdir/etc/hosts

	cat <<EOF | sudo tee ${strapdir}/finalize >/dev/null
#!/bin/sh

yes | find /home/ -type f -name "*.deb" -exec dpkg --force-depends -i {} \+
yes | apt-get -f install

chmod +x /usr/local/bin/usbpmount.sh
chmod +x /usr/local/bin/usb-unmount.sh
chmod +x /usr/bin/preseed-hack
rm -f /etc/apt/sources.list~
rm -f /etc/apt/trusted.gpg~
rm -f /home/*.deb
rm -f debconf.set
rm -f thirdstage
rm -f thirdstage.log
rm -f .keep
rm -f /root/bash_history
rm -f vmlinuz.old
rm -f initrd.img.old
rm -f /etc/ssh/ssh_host_*
rm -f /etc/fstab

# ----------- extra_packages
for _PACKAGE in ${extra_packages}
do
	# echo "\${_PACKAGE}"
	apt-get --yes --force-yes --fix-missing install "\${_PACKAGE}"
done

apt-get clean
rm -f /var/lib/apt/lists/*_dists_*

EOF

	chroot-script -d finalize || zerr

}

blend_prebuild() {
	fn blend_prebuild
	req=(strapdir)
	ckreq || return 1

notice "executing $blend prebuild"

	blend_exec_hooks 			|| zerr
	blend_cleanup 				|| zerr
	blend_write_isolinux_cfg	|| zerr

	if ls $strapdir/*.txt > /dev/null 2>&1
	then
		notice "moving log file to log folder"
		mv -f $strapdir/*.txt $R/log/
	fi

}

blend_exec_hooks() {
	fn blend_exec_hooks
	req=(strapdir blend os arch release extra_packages)
	ckreq || return 1

notice "Running blend_exec_hooks: '${strapdir}'"

notice "Copying system hooks"
	# /usr/share/live/build/hooks/normal/
	cp -rf $R/extra/hooks/normal/* ${strapdir}/hooks

	ls -al ${strapdir}/hooks

	cat <<EOF | sudo tee ${strapdir}/exec_hooks >/dev/null
#!/bin/sh

cd /hooks

## Processing local hooks
if ls ./*.chroot > /dev/null 2>&1
then

	for HOOK in ./*.chroot
	do
		if [ ! -x ./"\${HOOK}" ]
		then
			echo "chmod  hook : \${HOOK}"
			chmod +x ./"\${HOOK}"
		fi

		echo "Executing hook : \${HOOK}"
		eval ./"\${HOOK}" # || { Echo_error "\${HOOK} failed (exit non-zero). You should check for errors."; exit 1 ;}

		# echo "Removing hook : \${HOOK}"
		rm -f ./"\${HOOK}"
	done
fi

EOF

	chroot-script -d exec_hooks || zerr
}

blend_cleanup() {
	fn blend_cleanup
	req=(strapdir blend blendname os version arch release purge_packages_final )
	ckreq || return 1

notice "Running blend_cleanup"

	cat <<EOF | sudo tee ${strapdir}/scrubclean >/dev/null
#!/bin/sh

rm -rf /hooks

apt-get --yes --force-yes purge ${purge_packages_final}

apt-get --yes --force-yes autoremove
apt-get clean

EOF

	chroot-script -d scrubclean || zerr
	
	cp -rfav $R/extra/common/extra/config-files/slim.conf $strapdir/etc/
	
	# Copy in custom apt config here! MUST BE just before the iso is created
	# \cp causes OVERWRITE
	\cp -rfav $R/extra/common/extra/apt-files/apt/* $strapdir/etc/apt/

	sed -i -e 's/REPLACEME/'"${version}"'/g' $strapdir/etc/hostname
	sed -i -e 's/REPLACEME/'"${version}"'/g' $strapdir/etc/issue
	sed -i -e 's/REPLACEME/'"${version}"'/g' $strapdir/etc/issue.net
	sed -i -e 's/REPLACEME/'"${version}"'/g' $strapdir/etc/motd
	sed -i -e 's/REPLACEME/'"${version}"'/g' $strapdir/usr/lib/os-release

	rm -f $strapdir/etc/os-release
	ln -sf $strapdir/usr/lib/os-release $strapdir/etc/os-release
}

blend_write_isolinux_cfg() {
	fn blend_write_isolinux_cfg
	req=(workdir)
	ckreq || return 1
	
	notice "copying isolinux overlay"
	
	cp -rav /$R/extra/common/isolinux-overlay/* $workdir/binary/isolinux/

	cp -rav /$R/extra/common/isolinux-overlay/*.txt $workdir/binary/isolinux/
	cp -rav /$R/extra/common/isolinux-overlay/splash.png $workdir/binary/isolinux/	

	notice "copying grub overlay"	

	cp -rfav /$R/extra/common/grub-overlay/boot/grub ${workdir}/binary/boot/
	rm -f ${workdir}/binary/boot/grub/splash.png
	ln ${workdir}/binary/isolinux/splash.png ${workdir}/binary/boot/grub/splash.png

	cp -rfav /$R/extra/d-i/preseed.cfg ${workdir}/binary/install/
	cp -rfav ${workdir}/binary/install/cdrom/initrd.gz ${workdir}/binary/install/

	rm -rf ${workdir}/binary/install/cdrom

}

blend_post_efi() {
	fn blend_post_efi
	req=(workdir blend blendname)
	ckreq || return 1

notice "executing $blend post_efi"	

}
