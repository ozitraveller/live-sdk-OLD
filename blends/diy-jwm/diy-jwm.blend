#!/usr/bin/env zsh
# diy-jwm.blend

vars+=(mkefi efi_work)

#~ # uncomment to create uefi-bootable iso
mkefi="yes"
efi_work="$BLENDPATH/efi-files"

#~ #grubversion="grub-pc"
#~ grubversion="grub-efi-amd64"

#~ image_name="${os}_${release}_${version}_${arch}_uefi"

BLENDPATH="${BLENDPATH:-$(dirname $0)}"

source $BLENDPATH/config

blend_preinst() {
	fn blend_preinst
	req=(strapdir blend release)
	ckreq || return 1

	notice "executing $blend preinst"
	
}


blend_postinst() {
	fn blend_postinst
	req=(strapdir blend)
	ckreq || return 1

	notice "executing $blend postinst"
	
	pushd "$strapdir"
		mkdir ./hooks
		sudo rsync -avx --no-o --no-g "$BLENDPATH"/rootfs-overlay/* . || zerr
	popd
	
## finalize
	blend_finalize          || zerr

}


blend_finalize() {
	fn blend_finalize
	req=(strapdir blend blendname os arch release extra_packages workdir)
	ckreq || return 1
notice "Running blend_finalize"

	# cp -rav $R/blends/$blendname/custom-packages/$release/*_${arch}.deb $strapdir/home/
	# cp -rav $R/blends/$blendname/custom-packages/$release/*_all.deb     $strapdir/home/
	# cp -rav $R/blends/$blend/dselect/pkglist.txt                    $strapdir/home/
	
	sed -i '12i Defaults        env_reset , timestamp_timeout = 0' $strapdir/etc/sudoers
	
# remove fstab for iso. Probably, this should be in iso_prepare_strap
	rm -f $strapdir/etc/fstab

	echo \
"127.0.0.1       ${os}                localhost
::1              localhost            ip6-localhost ip6-loopback
fe00::0          ip6-localnet
fe00::0          ip6-mcastprefix
fe02::1          ip6-allnodes
fe02::1          ip6-allrouters" > $strapdir/etc/hosts

	_VERSION='2.0.2'
	_SOURCE='star-kirk'	

	sed -i -e 's/REPLACEME/'"${_VERSION}"'/g' $strapdir/etc/hostname
	sed -i -e 's/REPLACEME/'"${_VERSION}"'/g' $strapdir/etc/issue
	sed -i -e 's/REPLACEME/'"${_VERSION}"'/g' $strapdir/etc/issue.net
	sed -i -e 's/REPLACEME/'"${_VERSION}"'/g' $strapdir/etc/motd
	sed -i -e 's/REPLACEME/'"${_VERSION}"'/g' $strapdir/etc/os-release

	cat <<EOF | sudo tee ${strapdir}/finalize >/dev/null
#!/bin/sh

# export DEBIAN_FRONTEND=noninteractive

yes | find /home/ -type f -name "*.deb" -exec dpkg --force-depends -i {} \+
yes | apt-get -f install

# chmod -R 755 /usr/bin/lock-screen
# chmod -R 755 /usr/bin/compositor
chmod +x /usr/local/bin/usbpmount.sh
chmod +x /usr/local/bin/usb-unmount.sh
chmod +x /usr/bin/preseed-hack
# rm -f /usr/bin/preseed-hack
rm -f /etc/apt/sources.list~
rm -f /etc/apt/trusted.gpg~
rm -f /home/*.deb
rm -f debconf.set
rm -f thirdstage
rm -f thirdstage.log
rm -f .keep
rm -f /root/bash_history
rm -f vmlinuz.old
rm -f initrd.img.old
rm -f /etc/ssh/ssh_host_*
rm -f /etc/fstab
chmod +x /etc/init.d/live-sessions
update-rc.d live-sessions defaults
# chmod +x /usr/bin/preseed-hack


# export DEBIAN_FRONTEND=noninteractive

apt-get --yes --force-yes --fix-missing install ${extra_packages}
# apt-get --yes --force-yes autoremove


apt-get clean
rm -f /var/lib/apt/lists/*_dists_*

EOF

	chroot-script -d finalize || zerr
	

}


blend_exec_hooks() {
	fn blend_exec_hooks
	req=(strapdir blend os arch release extra_packages)
	ckreq || return 1
notice "Running blend_exec_hooks"
	
	cat <<EOF | sudo tee ${strapdir}/exec_hooks >/dev/null
#!/bin/sh


# echo "strapdir : \${strapdir}"
## Processing distribution hooks

cd /hooks

## Processing local hooks
if ls ./*.chroot > /dev/null 2>&1
then

	for HOOK in ./*.chroot
	do
		if [ ! -x ./"\${HOOK}" ]
		then
			echo "chmod  hook : \${HOOK}"
			chmod +x ./"\${HOOK}"
		fi

		# echo "Executing hook : \${HOOK}"
		eval ./"\${HOOK}" # || { Echo_error "\${HOOK} failed (exit non-zero). You should check for errors."; exit 1 ;}

		# echo "Removing hook : \${HOOK}"
		rm -f ./"\${HOOK}"
	done
fi

if ls ./*.binary > /dev/null 2>&1
then
	for HOOK in ./*.binary
	do
		if [ ! -e ./"\${HOOK}" ]
		then
			continue
		fi

		if [ ! -x ./"\${HOOK}" ]
		then
			echo "chmod  hook : \${HOOK}"
			chmod +x ./"\${HOOK}"
		fi

		# Executing hook
		cd binary
		../"\${HOOK}" # || { Echo_error "${HOOK} failed (exit non-zero). You should check for errors."; exit 1 ;}
		cd "${OLDPWD}"
		rm -f ./"\${HOOK}"
	done
fi

EOF

	chroot-script -d exec_hooks || zerr
}

blend_cleanup() {
	fn blend_cleanup
	req=(strapdir blend blendname os arch release extra_packages )
	ckreq || return 1
notice "Running blend_clean_hooks"

	cat <<EOF | sudo tee ${strapdir}/scrubclean >/dev/null
#!/bin/sh


rm -f exec_hooks
rm -f exec_hooks.log
rm -rf /hooks
apt-get --yes --force-yes  remove --purge \
	bluez \
	ethtool \
	build-essential \
	fakeroot \
	reportbug \
	cowbuilder \
	cowdancer \
	eatmydata
	
#~ apt-get --yes --force-yes  remove --purge \
 	#~ aptitude \
 	#~ console-setup \
 	#~ console-data \
 	#~ dselect \
	#~ os-prober \
	#~ acpi-support-base \
	#~ discover \
	#~ dnsutils \
	#~ ftp \
	#~ gnupg2 \
	#~ reportbug \
	#~ whois \
	#~ dhcpcd5 \
	#~ inetutils-ping \
	#~ libuuid-perl \
	#~ ethtool \
	#~ build-essential \
	#~ fakeroot \
	#~ gawk

EOF

	chroot-script -d scrubclean || zerr
	
	cat <<EOF | sudo tee ${strapdir}/list_installed-packages >/dev/null
#!/bin/sh

dpkg-query -f '\"${binary:Package}\"\n' -W > ./installed-packages


EOF

# sudo chroot $HOME/live-sdk/tmp/devuan-amd64-build/bootstrap

# sudo cp /home/ozi/live-sdk/blends/list_installed-packages /home/ozi/live-sdk/tmp/devuan-amd64-build/bootstrap
# sudo cp /home/ozi/live-sdk/tmp/devuan-amd64-build/bootstrap/installed-packages /home/ozi/live-sdk/blends
# sudo rm -f /home/ozi/live-sdk/blends/list_installed-packages
# sudo rm -f /home/ozi/live-sdk/blends/installed-packages
	
	cp -rfav $R/blends/list_installed-packages $strapdir
	chroot-script list_installed-packages || zerr
	rm -f $strapdir/list_installed-packages
	mv -f $strapdir/installed-packages $R/log/
	
	cp -rfav $R/blends/$blendname/extra/config-files/slim.conf $strapdir/etc/	
}

blend_installer_update () {
	fn blend_installer_update
	req=(workdir release strapdir)
	ckreq || return 1
notice "Running blend_installer_update"

		
	local TARGET_INITRD
	local INCLUDE_PATH
	local INITRD_GI
	TARGET_INITRD="install/gtk/initrd.gz"
	INCLUDE_PATH="includes.installer"
	REPACK_TMPDIR="unpacked-initrd"
	INITRD_GI="gtk/initrd.gz"

cat <<EOF | sudo tee ${strapdir}/Repack_Initrd >/dev/null
#!/bin/sh

# set -x

cd binary

#~ if [ -d ${INCLUDE_PATH} ]
#~ then
	#~ INCLUDE_PATH=$(readlink -f ${INCLUDE_PATH})
#~ fi
	
# cpio does not have an "extract to directory", so we must change directory
mkdir -p ${REPACK_TMPDIR}

cd ${REPACK_TMPDIR}
gzip -d < ../${TARGET_INITRD} | cpio -i --make-directories --no-absolute-filenames

# New way, include target directory content in the initrd
REPACK_TMPDIR_ABS="${REPACK_TMPDIR}"

cd ../"${INCLUDE_PATH}"
cp -rav ./* ../${REPACK_TMPDIR}

find -print0 | cpio -pumd0 --no-preserve-owner "${REPACK_TMPDIR_ABS}/"
cd ../${REPACK_TMPDIR}

find -print0 | cpio -H newc -o0 | gzip -9 > ../${TARGET_INITRD}
	
EOF

	notice "Installer gtk update - Repack_initrd"

	# the preseed.cfg file:
	notice "copying isolinux overlay - preseed.cfg"
	if [ -f ${workdir}/binary/install/*.cfg ]; then
		rm -f ${workdir}/binary/install/*.cfg
	fi

	notice "move binary - sudo mv ${workdir}/binary ${strapdir}"
	mv ${workdir}/binary ${strapdir}
	mv ${strapdir}/includes.installer ${strapdir}/binary
			
	if [ -d ${strapdir}/binary/includes.installer ] && [ -n "$(ls -A ${strapdir}/binary/includes.installer)" ]
	then
notice "=------1------="
		if [ -e ${strapdir}/binary/install/gtk ]
		then
notice "=------2------="

			if ls $R/extra/installer-files/*.cfg > /dev/null 2>&1
			then
				cp -rfav $R/extra/installer-files/*.cfg ${strapdir}/binary/install/
			fi
			cp -rfav $R/blends/$blendname/extra/installer-files/preseed.cfg ${strapdir}/binary/install/
			cp -rfav ${strapdir}/binary/install/cdrom/initrd.gz ${strapdir}/binary/install/

			notice "Repack_initrd - ${INITRD_GI}" "/includes.installer"
			chroot-script Repack_Initrd || zerr
			
		fi
	fi

	mv ${strapdir}/binary ${workdir}

	rm -rf ${workdir}/binary/includes.installer
	rm -rf ${workdir}/binary/unpacked-initrd
	rm -rf ${workdir}/binary/install/cdrom

}

#~ iso_write_isolinux_cfg() {
	#~ fn iso_write_isolinux_cfg "(override)"
	#~ req=(workdir arch username)
	#~ ckreq || return 1

	#~ notice "writing isolinux configuration"

	#~ cat <<EOF | sudo tee ${workdir}/binary/isolinux/isolinux.cfg >/dev/null
#~ ui vesamenu.c32
#~ prompt 0
#~ menu title devuan-live boot menu
#~ timeout 70
#~ menu background /isolinux/splash.png
#~ menu color title	* #FFFFFFFF *
#~ menu color border	* #00000000 #00000000 none
#~ menu color sel		* #ffffffff #A1B067 *
#~ menu color hotsel	1;7;37;40 #ffffffff #A1B067 *
#~ menu color tabmsg	* #E5FD91 #00000000 *
#~ menu color cmdline 0 #E5FD91 #00000000
#~ menu tabmsg Press ENTER to boot or TAB to edit a menu entry
#~ menu vshift 12
#~ menu rows 12

#~ label live
	#~ menu label ${os}-live (${arch})
	#~ menu default
	#~ linux /live/vmlinuz
	#~ append initrd=/live/initrd.img boot=live username=${username}

#~ label lang
	#~ menu label Other language (TAB to edit)
	#~ linux /live/vmlinuz
	#~ append initrd=/live/initrd.img boot=live username=${username} hooks=file:///lib/live/mount/medium/live/hooks/fix-lang.sh locales=it_IT.UTF-8

#~ label toram
	#~ menu label ${os}-live (${arch}) (load to RAM)
	#~ linux /live/vmlinuz
	#~ append initrd=/live/initrd.img boot=live username=${username} toram

#~ label failsafe
	#~ menu label ${os}-live (${arch}) (failsafe)
	#~ kernel /live/vmlinuz noapic noapm nodma nomce nolapic nosmp nomodeset vga=normal
	#~ append initrd=/live/initrd.img boot=live

#~ label memtest
	#~ menu label Memory test
	#~ kernel /live/memtest

#~ endtext
#~ EOF

	#~ notice "copying isolinux overlay"
	#~ sudo mkdir -p "$workdir"/binary/{live,isolinux}
	#~ sudo cp -rav "$BLENDPATH"/isolinux-overlay/* "$workdir"/binary/isolinux/
	#~ [[ -n "$hookscripts" ]] && {
		#~ sudo cp -av "$BLENDPATH"/hooks "$workdir"/binary/live/
	#~ }
#~ }

# create /boot and /efi for uefi.
# uefi code borrowed and adapted from David Hare, who borrowed and adapted it 
# from similar scripts by Colin Watson and Patrick J. Volkerding.
iso_make_efi() {
	fn iso_make_efi
	req=(workdir efi_work blend blendname)
	ckreq || return 1
	set -x
	notice "creating efi boot files"
	
#	uefi_opt="-eltorito-alt-boot -e boot/grub/efiboot.img -isohybrid-gpt-basdat -no-emul-boot"
	
	tempdir="$(mktemp -d /tmp/work_temp.XXXX)"

	# for initial grub.cfg
	mkdir -p "$tempdir"/boot/grub


	cat >"$tempdir"/boot/grub/grub.cfg <<EOF
search --file --set=root /isolinux/isolinux.cfg
set prefix=(\$root)/boot/grub
source \$prefix/x86_64-efi/grub.cfg
EOF


	if ! [ -d "$efi_work" ] ; then
		mkdir "$efi_work"
		
	fi

	pushd "$efi_work"

	# start with empty directories.

	if [ -d "boot" ] ; then
		rm -rf boot
	fi
	
	if [ -d "efi" ] ; then
		rm -rf efi
	fi

	mkdir -p boot/grub/x86_64-efi
	mkdir -p efi/boot

	# copy splash
	cp ${isolinux_overlay}splash.png boot/grub/splash.png
	
	# second grub.cfg file
	for i in $(ls /usr/lib/grub/x86_64-efi|grep part_|grep \.mod|sed 's/.mod//'); do echo "insmod $i" >> boot/grub/x86_64-efi/grub.cfg; done
	# Additional modules so we don't boot in blind mode. I don't know which ones are really needed.
	for i in efi_gop efi_uga ieee1275_fb vbe vga video_bochs video_cirrus jpeg png gfxterm ; do echo "insmod $i" >> boot/grub/x86_64-efi/grub.cfg ; done

	echo "source /boot/grub/grub.cfg" >> boot/grub/x86_64-efi/grub.cfg
	
	pushd "$tempdir"
	
		# make a tarred "memdisk" to embed in the grub image
		tar -cvf memdisk boot
		
		# make the grub image
		grub-mkimage -O "x86_64-efi" -m "memdisk" -o "bootx64.efi" -p '(memdisk)/boot/grub' search iso9660 configfile normal memdisk tar cat part_msdos part_gpt fat ext2 ntfs ntfscomp hfsplus chain boot linux
		
	popd
	
	# copy the grub image to efi/boot (to go later in the device's root)
	cp "$tempdir"/bootx64.efi efi/boot
	
	#######################
	
	## Do the boot image "boot/grub/efiboot.img"
	
	dd if=/dev/zero of=boot/grub/efiboot.img bs=1K count=1440
	/sbin/mkdosfs -F 12 boot/grub/efiboot.img
	
	sudo mkdir img-mnt
	
	sudo mount -o loop boot/grub/efiboot.img img-mnt
	
	sudo mkdir -p img-mnt/efi/boot
	
	sudo cp "$tempdir"/bootx64.efi img-mnt/efi/boot/
	
	#######################
	
	# copy modules and font
	cp /usr/lib/grub/x86_64-efi/* boot/grub/x86_64-efi/
	
	# if this doesn't work try another font from the same place (grub's default, unicode.pf2, is much larger)
	# Either of these will work, and they look the same to me. Unicode seems to work with qemu. -fsr
#	cp /usr/share/grub/ascii.pf2 boot/grub/font.pf2
	cp /usr/share/grub/unicode.pf2 boot/grub/font.pf2
	
	# doesn't need to be root-owned
#	sudo chown -R 1000:1000 $(pwd) 2>/dev/null
	
	# Cleanup efi temps
	sudo umount img-mnt
	sudo rmdir img-mnt
	rm -rf "$tempdir"

	popd


	#~ # Copy efi files to iso
	pushd $workdir
	sudo rsync -avx "$efi_work"/boot binary/
	sudo rsync -avx "$efi_work"/efi  binary/
	popd
	
	# Do the main grub.cfg (which gets loaded last):
	cp -rfav /$R/blends/$blendname/binary-overlay/boot/grub ${workdir}/binary/boot/
	# cp -rfav /$R/blends/$blendname/efi-files/efi ${workdir}/binary/boot/
	sed -i "s/REPLACEME/devuan/g" ${workdir}/binary/boot/grub/grub.cfg
	
	#~ cat <<EOF | sudo tee ${workdir}/binary/boot/grub/grub.cfg
#~ if loadfont $prefix/font.pf2 ; then
  #~ set gfxmode=640x480
  #~ insmod efi_gop
  #~ insmod efi_uga
  #~ insmod video_bochs
  #~ insmod video_cirrus
  #~ insmod gfxterm
  #~ insmod jpeg
  #~ insmod png
  #~ terminal_output gfxterm
#~ fi

#~ background_image /boot/grub/splash.png
#~ set menu_color_normal=white/black
#~ set menu_color_highlight=dark-gray/white
#~ set timeout=6

#~ menuentry "${os} (defaults)" {
    #~ set gfxpayload=keep
    #~ linux   /live/vmlinuz boot=live username=$username    
    #~ initrd  /live/initrd
#~ }
#~ EOF
#~ set +x
}
